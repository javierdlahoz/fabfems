<?php
/**
 * @file
 * Code for the FabFems/NRMD User feature.
 */

include_once 'fabfems_nrmd_user.features.inc';

// Set a language constant so that we can use it to refer to field values.
define('FIELD_LANGUAGE', 'und');

// Set constants for the various Profile Statuses.
define('PROFILE_STATUS_DRAFT', 'Draft');
define('PROFILE_STATUS_SUBMITTED', 'Submitted');
define('PROFILE_STATUS_APPROVED', 'Approved');
define('PROFILE_STATUS_DECLINED', 'Declined');

/**
 * Implementation of hook_init().
 */
function fabfems_nrmd_user_init() {
  // Check current user's profile completion status, provide HUD if incomplete.
  if (module_exists('pdm')) {
    _fabfems_nrmd_user_profile_hud();
  }
  // Add CSS.
  drupal_add_css(drupal_get_path('module', 'fabfems_nrmd_user') . '/fabfems_nrmd_user.css');
  
  // If we're on the user profile, add colorbox JS for the gallery.
  if (arg(0) == 'user') {
    if (is_numeric(arg(1))) {
      $uid = arg(1);
    } else {
      // If the path is just /user, we're on the current logged-in user's profile.
      global $user;
      $uid = $user->uid;
    }
  
    drupal_add_js(
    'jQuery(document).ready(function () {' .
      'jQuery("a.multimedia-gallery-' . $uid . '")' .
        '.attr("target", "self")' .
        '.colorbox({' .
          'iframe:true, ' .
          'fastIframe:false, ' .
          'transition:"elastic", ' .
          'width:"590", '.
          'height:"472", '.
          'current:"{current} of {total}", ' .
          'rel:"multimedia-gallery-' . $uid . '", ' .
          'onComplete: function() {' .
            'var ifrm_content = jQuery(".cboxIframe").contents().find("img").css({"display":"block", "margin":"0 auto"});' .
          '}' .
        '});'.
      '});',
      'inline'
    );
  }
}

/**
 * Implementation of hook_form_alter
 */
function fabfems_nrmd_user_form_alter(&$form, &$form_state, $form_id) {
  
  // All user profile forms except Approval: set the "Status changed?" field to FALSE.
  if (isset($form['field_role_model_status_changed'])) {
    $form['field_role_model_status_changed'][FIELD_LANGUAGE]['#default_value'] = 0;
  }
  
  switch ($form_id) {
  
    // Form alters for the user-profile fieldgroup forms configured in this feature.
    
    case 'profile_tabs_group_approval':
    
      // If the acting user is an admin...
      if (user_access('administer role model profiles')) {

        // If user being edited is not an admin, preprocess the "Approval" fields.
        
        // Always show the Comment field as empty.
        $form['field_role_model_status_log'][FIELD_LANGUAGE][0]['value']['#default_value'] = '';
        
        // Always set the "Status changed?" field to TRUE here.  The rule will change 
        // it back to TRUE after submit if the Status or Comment field are changed.
        $form['field_role_model_status_changed'][FIELD_LANGUAGE]['#default_value'] = 1;
        
        // Remove the "N/A" option from the Status radio buttons.
        unset($form['field_role_model_status'][FIELD_LANGUAGE]['#options']['_none']);
        
        // Render the "Approval History" view for this user in the Approval fieldset.
        $history = views_embed_view('role_model_approval_history', 'block', $form['#user']->uid);
        $form['role_model_status_history'] = array(
          '#prefix' => '<div class="form-item">',
          '#suffix' => '</div>',
          '#type' => 'markup',
          '#markup' => '<label>History</label>' . $history,
          '#weight' => 5,
        );
        $form['#group_children']['role_model_status_history'] = 'group_approval';
        
        // Remove the "Cancel user account" button - it's inappropriate here.
        unset($form['actions']['cancel']);
      }
      break;
        
    case 'profile_tabs_group_page_gallery':
      // Remove the "Cancel user account" button - it's inappropriate here.
      unset($form['actions']['cancel']);
      
      // Temporary - hide the old Gallery Images field.
      unset($form['field_gallery_images']);
      break;
    
    case 'profile_tabs_group_page_profile':
    
      /* 
       * If a non-admin is editing a profile that's Declined or Draft, change the submit buttons 
       * to "Save Draft" and "Submit for Moderation". (Admins should always see just "Save", and 
       * authors should see "Save" when editing their profile when it's approved.)
       */
      if (!user_access('administer role model profiles') && $form_state['user']->field_role_model_status[FIELD_LANGUAGE][0]['value'] != PROFILE_STATUS_APPROVED) {
        $form['actions'] = array(
          'save_as_draft' => array(
            '#type' => 'submit',
            '#value' => t('Save as Draft'),
            '#name' => PROFILE_STATUS_DRAFT,
            '#weight' => 0,
          ),
          'submit_for_moderation' => array(
            '#type' => 'submit',
            '#value' => t('Submit for Moderation'),
            '#name' => PROFILE_STATUS_SUBMITTED,
            '#weight' => 1,
          ),
          '#weight' => 99, // Make sure the buttons render below the horizontal tabs group.
        );

        // Add custom validate handler
        array_unshift($form['#validate'], '_fabfems_nrmd_user_profile_form_validate');

        // Add submit handler to process the difference between these custom submit buttons.
        array_unshift($form['#submit'], '_fabfems_nrmd_user_profile_form_submit');
        
      } else {
        // Remove the "Cancel user account" button - it's inappropriate here.
        unset($form['actions']['cancel']);
      }
      
      // Show the current profile status (ie "Status: Approved") above the main form.
      if (isset($form_state['user']->field_role_model_status[FIELD_LANGUAGE][0]['value'])) {
        $form['role_model_status_message'] = array(
          '#prefix' => '<div id="profile-status"><span id="label">Profile status:</span> ',
          '#suffix' => '</div>',
          '#type' => 'markup',
          '#markup' => $form_state['user']->field_role_model_status[FIELD_LANGUAGE][0]['value'],
          '#weight' => -99,
        );
      }
      
			// Remove the "N/A" option from the PROFILE DISPLAY radio buttons.
			unset($form['field_display_profile_to'][FIELD_LANGUAGE]['#options']['_none']);

      // Remove the "N/A" option from the Status radio buttons.
      unset($form['field_display_email'][FIELD_LANGUAGE]['#options']['_none']);
      
      break;
    
    case 'profile_tabs_group_account_settings':
      // If we came here via a one-time login link...
      if (isset($_GET['pass-reset-token'])) {
        // ...and if this is a new user...
        global $user;
        if ($user->data['fabfems_nrmd_user_new'] == TRUE) {
          // ...add some help text...
          drupal_set_title(t('Password setup'));
          $form['message'] = array('#markup' => t('<p>Please create a password for your account.</p>'), '#weight' => -10);
          // ...and a custom submit handler to redirect to the next registration step: editing the profile.
          $form['#submit'][] = '_fabfems_nrmd_user_password_form_submit';
        }
      }
      break; 

    // Other user-related form alters:

    case 'user_cancel_confirm_form':
      // Retitle the "Cancel" link on the account cancellation confirmation form for clarity.
      global $user;
      $form['actions']['cancel']['#title'] = (arg(1) == $user->uid) ? "No, don't cancel my account!" : "No, don't cancel account!" ;
      break;
  
    case 'user_register_form':
      // Set a page title that's in line with role model registration messaging.
      if (arg(0) == 'user') {
      
        // Set page title.
        drupal_set_title(t('Registration')); // TODO: this probably belongs in a page_alter.
      
        // Set a value on the user that tells us this user hasn't set a password yet.
        $form['fabfems_nrmd_user_new'] = array('#type' => 'value', '#default_value' => TRUE);
        
        // Add submit handler to do custom redirect after registration form submit.
        $form['#submit'][] = '_fabfems_nrmd_user_register_form_submit';
        
      }
      break;
      
    case 'user_login':
    case 'user_pass':
      drupal_set_title(t('My Account')); // TODO: this probably belongs in a page_alter.
      break;
      
    case 'user_pass_reset':
      // For new users only, change the messaging on the "one-time login link" form.
      $account = user_load(arg(2));
      // If they have never access their account before...
      if (!$account->access) {
        // Change the messaging on the form to reflect that they are in the Registration Steps.
        $form['message'] = array('#markup' => t('<p>This is a one-time login for %user_name. Click on this button to log in to the site and set your password.</p>', array('%user_name' => $account->name)), '#attributes' => array('class' => 'sass'));
        $form['help'] = array();
        drupal_set_title('Password setup');
      }
      break;
  
    case 'contact_personal_form':
      // Inherited from kwall
      $user_data = user_load($user->uid);
      $form['name']['#default_value'] = $user_data->field_first_name[FIELD_LANGUAGE][0]['safe_value'];
      $account_data = user_load($form['recipient']['#value']->uid);
      drupal_set_title(t('Contact !name', array('!name' => $account_data->field_first_name[FIELD_LANGUAGE][0]['value'])));
      $form['to']['#access'] = FALSE;
      break;
  }
}

/**
 * Implementation of hook_permission
 */
function fabfems_nrmd_user_permission() {
  return array(
    'administer role model profiles' => array(
      'title' => t('Administer role model profiles'),
    ),
  );
}

/**
 * Implementation of hook_menu()
 */
function fabfems_nrmd_user_menu() {
  $items['registration/thanks'] = array(
    'title' => 'Registration',
    'page callback' => 'fabfems_nrmd_registration_thanks',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/gallery'] = array(
    'title' => 'Gallery',
    'page callback' => 'fabfems_nrmd_user_multimedia_gallery',
    'page arguments' => array(1, 'page'),
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implementation of hook_menu_alter()
 */
function fabfems_nrmd_user_menu_alter(&$items) {

  // Prevent the user contact form from showing as a tab on the user profile
  if (!empty($items['user/%user/contact'])) {
    $items['user/%user/contact']['type'] = MENU_CALLBACK;
  }
  
  // Strip away the "revisions" tab added by user_revision.module.
  unset($items['user/%user/revisions']);
  
  // And the IMCE "File browser" tab.
  unset($items['user/%user/imce']);
  
  // Restrict the Approval tab to admins.
  $items['user/%user/approval']['access callback'] = 'user_access';
  $items['user/%user/approval']['access arguments'] = array('administer role model profiles');
  
  // Prevent users from editing their Profile or Gallery while in the "Submitted" state.
  $items['user/%user/profile']['access callback'] = '_fabfems_nrmd_user_profile_tab_access';
  $items['user/%user/edit-gallery']['access callback'] = '_fabfems_nrmd_user_profile_tab_access';
  
  // DEVEL ONLY: remove the "Devel" tabs on user profiles for now.
  unset($items['user/%user/devel']);
  unset($items['user/%user/devel/load']);
  unset($items['user/%user/devel/render']);
  unset($items['user/%user/devel/token']);
  
  // TODO: make the Approval tab not render on profiles of admins.
}


/**
 * Implementation of hook_user_view
 * Inherited from kwall.  Tweak the output of the user profile text in various small ways - 
 * hide the address, format the bio, format the experience.
 */
function fabfems_nrmd_user_user_view($account, $view_mode, $langcode) {

  if ($view_mode == 'full') {
    
    // title
    if (!empty($account->field_first_name) && !empty($account->field_last_name)) {
      $title = $account->field_first_name[FIELD_LANGUAGE][0]['value'] . ' ' . $account->field_last_name[FIELD_LANGUAGE][0]['value'];
      drupal_set_title($title);
    }
    
    // address
    if (!empty($account->content['field_address'])) {
      unset($account->content['field_address'][0]);
      if ($account->content['field_address']['#items'][0]['locality']) {
        $location = $account->content['field_address']['#items'][0]['locality'];
				if ($account->content['field_address']['#items'][0]['administrative_area'])
        	$location .= ', ' . $account->content['field_address']['#items'][0]['administrative_area'];
				if ($account->content['field_address']['#items'][0]['country'])
					$location .= ', ' . $account->content['field_address']['#items'][0]['country'];
        $account->content['field_address'][0]['#markup'] = '<span>' . $location . '</span>';
        $account->content['field_address']['#formatter'] = 'text_default';
      }
    }
    
    // masquerade
    $account->content['masquerade']['#weight'] = 20;
    
    // university
    $account->content['field_university']['#title'] = t('Education');
    
    // field of work
    $account->content['field_of_work_other']['#title'] = 
      (!isset($account->content['field_of_work'])) ? t('Field of Work') : '';
    
    // experience
    if (!empty($account->content['field_experience'])) {
      $account->content['field_experience']['#title'] = t('My Experience');
      $exp_key = $account->content['field_experience']['#items'][0]['value'];
      switch ($exp_key) {
        case 'no':
          $exp_value = t('I am a <strong>new</strong> Role Model.');
          break;
        default:
          $exp_value = t('I have been a Role Model <strong>@key</strong> times.', array('@key' => $exp_key));
      }
      $account->content['field_experience'][0]['#markup'] = '<span>' . $exp_value . '</span>';
    }
    
    // Biography
    if (isset($account->field_biography[FIELD_LANGUAGE][0]['safe_value'])) {
      $account->content['field_biography'][0]['#markup'] = nl2br($account->field_biography[FIELD_LANGUAGE][0]['safe_value']);
    }
    
    // Profile status
    if (!empty($account->content['field_role_model_status'])) {
      $status = $account->content['field_role_model_status'][0]['#markup'];
      $account->content['field_role_model_status'][0]['#markup'] = '<span class="status">Profile status: ' . $status . '</span>';
      $account->content['field_address']['#formatter'] = 'text_default';
    }
  }
}

/**
 * Implementation of hook_admin_paths_alter
 * Inherited from kwall.
 */
function fabfems_nrmd_user_admin_paths_alter(&$paths) {
  // Treat all user pages as not administrative, so that they'll use the main theme.
  $paths['user/*'] = FALSE;
}

/**
 * Implementation of hook_block_info
 */
function fabfems_nrmd_user_block_info() {
  $blocks['user_sidebar'] = array(
    'info' => t('User Sidebar'),
  );
  $blocks['user_registration_steps'] = array(
    'info' => t('Section: Registration Steps'),
  );
  $blocks['role_models_view_admin_link'] = array(
    'info' => t('Role models view admin link'),
  );
  
  return $blocks;
}

/**
 * Implementation of hook_block_view
 */
function fabfems_nrmd_user_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'user_sidebar':
      $block = fabfems_nrmd_user_sidebar_block();
      break;
    case 'user_registration_steps':
      $block = fabfems_nrmd_user_registration_steps_block();
      break;
    case 'role_models_view_admin_link':
      $block = fabfems_nrmd_user_role_models_view_admin_link();
      break;
  }
  
  return $block;
}

/**
 * Implements hook_user_presave().
 *
 * Insert our custom "new user" state on user insert.  We need this to decide if the "Registration 
 * Steps" block should show up when the user is setting their password with a 1-time login link.
 */
function fabfems_nrmd_user_user_presave(&$edit, $account, $category) {  
  if (isset($edit['fabfems_nrmd_user_new'])) {
    $edit['data']['fabfems_nrmd_user_new'] = $edit['fabfems_nrmd_user_new'];
  }
}

/**
 * Implements hook_media_browser_plugins_alter().
 *
 * Get rid of the "Library" tab.  The only media field we use is the Gallery on role model
 * profiles, so there's no need for people to be able to use each other's content.
 * 
 */
function fabfems_nrmd_user_media_browser_plugins_alter(&$plugins) {
  unset($plugins['library']);
}

/**
 * Define the thank-you page you land on after initially submitting the registration form.
 */
function fabfems_nrmd_registration_thanks() {
  return '';
}

/**
 * Build output for user sidebar block.  Inherited from kwall.
 */
function fabfems_nrmd_user_sidebar_block() {

  global $user;
  global $_domain;
  
  // only output on user pages
  if (arg(0) != 'user' || !is_numeric(arg(1))) {
    $block['content'] = '';
    
    return $block;
  }
  
  $account = user_load(arg(1));
  
  // Multimedia gallery
  if (arg(2) != 'gallery') {
    $output = fabfems_nrmd_user_multimedia_gallery($account, 'sidebar');
    if (!empty($output)) {
      $output['#prefix'] = '<div class="multimedia-gallery-wrap">';
      $output['#suffix'] = '</div>';
      $block['content']['multimedia'] = $output;
    }
  }
  
  // build links
  $items = array();
  if (arg(2) == 'gallery' || arg(2) == 'contact') {
    $items[] = l(t('Role Model Profile'), 'user/' . $account->uid);
  }
  if (is_null(arg(2)) && isset($account->field_multimedia_gallery[FIELD_LANGUAGE])) {
    $items[] = l(t('View Full Gallery'), 'user/' . $account->uid . '/gallery');
  }
  if ($user->uid != $account->uid && is_null(arg(2)) && !empty($account->field_display_email[FIELD_LANGUAGE][0]['value']) && $account->field_display_email[FIELD_LANGUAGE][0]['value'] == 'Yes') {
    $items[] = l(t('Contact'), 'user/' . $account->uid . '/contact');
  }
  // Create the right Find Another Role Model link for the current domain.
  $find_path = stristr($_domain['machine_name'], 'fabfems') ? 'find' : 'nrmd/find';
  $items[] = l(t('Find Another Role Model'), $find_path);
  
  $block['content']['links'] = array(
    '#theme' => 'item_list',
    '#items' => $items,
    '#type' => 'ul',
    '#attributes' => array(),
  );
  
  return $block;
}

/*
 * Gets the Multimedia gallery from an specific user profile
 *
 * @param array $account
 *   User profile account.
 *
 * @return array
 *   A renderable array.
 */
function fabfems_nrmd_user_multimedia_gallery($account, $mode = 'sidebar') {
  
  // Get the user's multimedia items, if any.
  $multimedia_items = field_get_items('user', $account, 'field_multimedia_gallery');
  
  // Start with the default userpic.
  $userpic = array(
    'type' => 'image',
    'uri' => 'default_images/fabfems.png',
  );
  // Replace with the user's pic, if any.
  if (isset($account->field_image[FIELD_LANGUAGE][0])) {
    $userpic = $account->field_image[FIELD_LANGUAGE][0];
  }

  // Make the userpic the first item in the gallery.
  $multimedia_gallery = array(0 => $userpic);
  if ($multimedia_items) {
    $multimedia_gallery = array_merge($multimedia_gallery, $multimedia_items);
  }
  
  $output = array();
  $i = 0;
  
  // Depending on the mode (page or sidebar), use a different thumbnail image size and limit.
  if ($mode == 'sidebar') {
    $thumbnail_style = 'small-thumb-multimedia';
    $file_display_size = 'media_small';
    $limit = (count($multimedia_gallery) <= 6) ? 3 : 6; // Show one or two rows of thumbnails
    
  } else {
    // If we're on the full-page gallery...
    $thumbnail_style = 'gallery_new';
    $file_display_size = 'media_large';
    
    // Title the page according to the person's first name, if any, or username.
    $name = $account->field_first_name[FIELD_LANGUAGE][0]['value'];
    if (!$name) { $name = $account->name; }
    drupal_set_title($name . "'s Gallery");
  }
  
  foreach ($multimedia_gallery as $item) {
  
    // Set up classes for the a tag.  We'll use these to hide the image if it's over the limit.
    $class = 'multimedia-gallery multimedia-gallery-' . $account->uid . ' row-' . floor(($i - 1) / 3) . ' col-' . ($i - 1) % 3;
    
    // Don't show images beyond the max, if any.
    if (isset($limit) && $i > $limit) { $class .= ' invisible'; }
  
    switch ($item['type']) {
      case 'video':
      
        // Create video thumb
        $thumb = file_view_file(file_load($item['fid']), $file_display_size);
        // Local files don't generate preview thumbnails
        if ($thumb['#theme'] === 'media_formatter_large_icon') {
          $file = $thumb['#file'];
          $icon_dir = media_variable_get('icon_base_directory') . '/' . media_variable_get('icon_set');
          $icon = file_icon_path($file, $icon_dir);
          $settings = array(
            'path' => $icon,
            'width' => 70,
            'height' => 50,
            'alt' => $file->filename,
          );
          image_style_transform_dimensions($thumbnail_style, $settings); // Apply image style
          $thumbnail = theme('image', $settings);
        }
        else {
          $thumbnail = render($thumb);
        }
        
        // Create link to embedded video
        $url = fabfems_nrmd_user_video_create_url($item);
        // Create lightbox2 link
        $link = l($thumbnail . '<span class="video-overlay"></span>',
          $url,
          array(
            'html' => TRUE,
            'attributes' => array(
              'class' => $class,
            ),
          )
        );

        $output[] = array(
          '#type' => 'markup',
          '#markup' => $link,
        );
        $i++;
        break;
      case 'image':
      default:
        // Create image thumb
        $image_style = ($i == 0 && $mode == 'sidebar') ? 'profile' : $thumbnail_style; // Larger thumb for the profile pic.
        $thumb = theme('image_style', array('style_name' => $image_style, 'path' => $item['uri']));
        // Create lightbox2 link
        $link = l($thumb,
          image_style_url('full-multimedia',  $item['uri']),
          array(
            'html' => TRUE,
            'attributes' => array(
              'class' => $class,
            ),
          )
        );

        $output[] = array(
          '#type' => 'markup',
          '#markup' => $link,
        );
        $i++;
        break;
    }
  }

  return $output;  
}

/*
 * Build the right url to display a video
 *
 * @param array $variables
 *   A field array.
 *
 * @return array
 *   An string for the url.
 *
 * @See:
 *   Only youtube and vimeo and the 3rd parties considered right now.
 */
function fabfems_nrmd_user_video_create_url($variables) {
  $url = '';
  $instace = file_stream_wrapper_get_instance_by_uri($variables['uri']);
  
  // If the field is an instace of the Media module then we have to get its parameters
  if ($instace instanceof MediaReadOnlyStreamWrapper) {
    $scheme = file_uri_scheme($variables['uri']);
    $parameters = $instace->get_parameters();
    
    switch ($scheme) {
      case 'youtube':
        $url = 'http://youtube.com/embed/' . $parameters['v'];
        break;
      case 'vimeo':
        $url = 'http://player.vimeo.com/video/' . $parameters['v'];
        break;
    }
  }
  else {
    $url = file_create_url($variables['uri']);
  }
  
  return $url;
}

/**
 * Build output for "Registration Steps" block.
 */
function fabfems_nrmd_user_registration_steps_block() {

  // Show the "Step 1" version of the block only on the user registration form.
  if ($_GET['q'] == 'user/register' || $_GET['q'] == 'registration/thanks') {
    $step = 1;
    
  // Show "Step 2" on the one-time login link form, IF this is a new user.
  } else if (strpos($_GET['q'], 'reset')) {
    if (is_numeric(arg(2))) {
      if ($account = user_load(arg(2))) {
        // If they've never accessed their account, they're new; show them Registration Steps.
        if (!$account->access) {
          $step = 2;
        }
      }
    }
    
  // Show "Step 2" on the account settings form, IF this is a new user.
  } else if (isset($_GET['pass-reset-token'])) {
    global $user;
    if ($user->data['fabfems_nrmd_user_new'] == TRUE) {
      $step = 2;
    }
    
  // Show "Step 3" on the user profile form, if the profile's in the Draft state.
  } else if (arg(0) == 'user' && is_numeric(arg(1)) && arg(2) == 'profile') {
    if (_fabfems_nrmd_user_check_state(arg(1), PROFILE_STATUS_DRAFT)) {
      $step = 3;
    }
  }
  
  // If we have a step, render the block content and return the block.
  if (isset($step)) {
    $output = '<ul>';
    for ($i = 1; $i <= 3; $i++) {
      $output .= "<li class='step" . ($i == $step ? ' current-step' : '') . "'>$i</li>";
    }
    $output .= '</ul>';
    $block['content'] = '<h2>Registration Steps:</h2>' . $output;
    return $block;
  }
}

/**
 * "Admin view" link at top of Find a Role Model view.
 */
function fabfems_nrmd_user_role_models_view_admin_link() {
  if (user_access('administer role model profiles')) {
    return array('content' => l('Admin view', 'admin/people/role-models', array('attributes' => array('class' => 'admin-link'))));
  }
}

/**
 * Custom profile completion reminder.
 */
function _fabfems_nrmd_user_profile_hud() {
 
  // Check if this user needs a message.
  global $user;
  if ($user->uid) {
    
    // Admins should not get the message.
    if (user_access('administer site configuration')) { return; }
    
    // People who just joined in the last 6 hours should not get the message.
    if ($user->created > time() - 6 * 60 * 60) { return; }
    
    // People whose profile is Submitted or Approved should not get the message.
    if (_fabfems_nrmd_user_check_state($user->uid, PROFILE_STATUS_SUBMITTED) ||
      _fabfems_nrmd_user_check_state($user->uid, PROFILE_STATUS_APPROVED)) { return; }
    
    // If we got this far, we're a logged-in non-admin whose profile is Draft or Declined.
    $message = t(variable_get("fabfems_nrmd_hud_message"),
      array('@edit-profile' => '/user/'.$user->uid.'/profile'));
    $paths = 'find
about
partners
resources
contact-us
FAQ
nrmd/*
users/*';
    $options  = array(
      'repeat'              => FALSE, // Whether or not the message will repeat if there are multiple identical messages generated
      'paths'               => $paths, // A list of paths on which this pdm should appear
    );
    
    pdm_create_message($message, $options);
  }
}

/**
 * Custom validate handler for the user profile edit form.
 */
function _fabfems_nrmd_user_profile_form_validate($form, &$form_state) {
	//drupal_set_message('<pre>'.print_r($form_state['values'], TRUE).'</pre>');
	
	if ($form_state['clicked_button']['#name'] == PROFILE_STATUS_SUBMITTED) {
		//Personal Info
		if ($form_state['values']['field_biography']['und'][0]['value'] == '') {
			form_set_error('field_biography', 'Profile Biography is required.');
		}
		if ($form_state['values']['field_image']['und'][0]['fid'] == 0) {
			form_set_error('field_image', 'Profile Image is required.');
		}
		if ($form_state['values']['field_dob']['und'][0]['value'] == '') {
			form_set_error('field_dob', 'Birth Year is required.');
		}
		if ($form_state['values']['field_gender']['und'][0]['value'] == '') {
			form_set_error('field_gender', 'Gender is required.');
		}
		if ($form_state['values']['field_ethnicity']['und'][0]['value'] == '') {
			form_set_error('field_ethnicity', 'Ethnicity is required.');
		}

		//Contact Info
		if ($form_state['values']['field_first_name']['und'][0]['value'] == '') {
			form_set_error('field_first_name', 'First Name is required.');
		}
		if ($form_state['values']['field_last_name']['und'][0]['value'] == '') {
			form_set_error('field_last_name', 'Last Name is required.');
		}
		if ($form_state['values']['field_phone']['und'][0]['value'] == '') {
			form_set_error('field_phone', 'Phone Number is required.');
		}
		if (($form_state['values']['field_address']['und'][0]['thoroughfare'] == '')
		|| ($form_state['values']['field_address']['und'][0]['locality'] == '')
		|| ($form_state['values']['field_address']['und'][0]['administrative_area'] == '')
		|| ($form_state['values']['field_address']['und'][0]['postal_code'] == '')) {
			form_set_error('field_address', 'Complete Address is required.');
		}

		//Professional Info
		if ($form_state['values']['field_company']['und'][0]['value'] == '') {
			form_set_error('field_company', 'Company is required.');
		}
		if ($form_state['values']['field_job_title']['und'][0]['value'] == '') {
			form_set_error('field_job_title', 'Job Title is required.');
		}
		if ($form_state['values']['field_university']['und'][0]['value'] == '') {
			form_set_error('field_university', 'College is required.');
		}
		if ($form_state['values']['field_education_level']['und'][0]['value'] == '') {
			form_set_error('field_education_level', 'Education Level is required.');
		}
		if ($form_state['values']['field_degree']['und'][0]['value'] == '') {
			form_set_error('field_degree', 'Degree is required.');
		}
		if ($form_state['values']['field_of_work']['und'][0]['tid'] == 0) {
				form_set_error('field_of_work', 'Field of Work is required.');
		}
		if (($form_state['values']['field_of_work']['und'][0]['tid'] == 84) && ($form_state['values']['field_of_work_other']['und'][0]['value'] == '')) {
			form_set_error('field_of_work_other', 'Other Field of Work is required.');
		}

		//Role Model Info
		if ($form_state['values']['field_experience']['und'][0]['value'] == '') {
				form_set_error('field_experience', 'Age Range is required.');
		}
		if ($form_state['values']['field_age_range']['und'][0]['tid'] == 0) {
				form_set_error('field_age_range', 'Role Model experience is required.');
		}
		if ($form_state['values']['field_availability']['und'][0]['tid'] == 0) {
				form_set_error('field_availability', 'Availability is required.');
		}
		if ($form_state['values']['field_participation_level']['und'][0]['tid'] == 0) {
				form_set_error('field_participation_level', 'Level of Participation is required.');
		}
		if ($form_state['values']['field_additional_resources']['und'][0]['tid'] == 0) {
				form_set_error('field_additional_resources', 'Resources is required.');
		}
		if ($form_state['values']['field_referral_source']['und'][0]['tid'] == 0) {
				form_set_error('field_referral_source', 'Referral Source is required.');
		}
		if ($form_state['values']['field_affiliation']['und'][0]['tid'] == 0) {
				form_set_error('field_affiliation', 'Program Affiliation is required.');
		}
		if ($form_state['values']['field_interests']['und'][0]['tid'] == 0) {
				form_set_error('field_interests', 'Interests is required.');
		}
	}
}

/**
 * Custom submit handler for the user profile edit form.
 */
function _fabfems_nrmd_user_profile_form_submit($form, &$form_state) {

  // Update the value in the Approval Status field depending on whether the "Save as 
  // Draft" or "Submit for Moderation" button was clicked.
  $form_state['values']['field_role_model_status'][FIELD_LANGUAGE][0]['value'] = $form_state['clicked_button']['#name'];
  
  // If they've just submitted their profile, get rid of the reminder message about that.
  if ($form_state['clicked_button']['#name'] == PROFILE_STATUS_SUBMITTED) {
    if (module_exists('pdm')) {
      global $user;
      db_update('pdm')
        ->fields(array('dismissed' => time()))
        ->condition('uid', $user->uid)
        ->execute();
    }
  }
}

/**
 * Custom submit handler for the user registration form.
 * Stay on the reg form after submission rather than redirecting to the homepage.
 * The homepage is too busy and overwhelms the "go check your email" message.
 */
function _fabfems_nrmd_user_register_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'registration/thanks';
}

/**
 * Custom submit handler for the user account settings form, only on first login.
 * After setting password, redirect to the profile edit form.
 */
function _fabfems_nrmd_user_password_form_submit($form, &$form_state) {
  global $user;
  $form_state['redirect'] = 'user/' . $user->uid . '/profile';
  
  // Clear the message, set a custom message of our own.
  drupal_get_messages(NULL, TRUE);
  drupal_set_message("Now that you've set up your password, you're ready to start filling out
    your profile.");
  
  // If we got here, the password saved successfully, so this is no longer a new user.
  // TO DO: is this necessary?
  $form_state['user']->data['fabfems_nrmd_user_new'] = FALSE;
}

/**
 * Access callback for the user Edit Profile and Edit Gallery tabs.
 * Prevent users from editing their Profile or Gallery while in the "Submitted" state.
 */
function _fabfems_nrmd_user_profile_tab_access($account) {
  global $user;
  if (user_access('administer role model profiles')) {
    return TRUE;
  } else if ($user->uid == $account->uid) {
    if ($account->field_role_model_status[FIELD_LANGUAGE][0]['value'] != PROFILE_STATUS_SUBMITTED) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Utility function - check if a user has a given Approval status.
 */
function _fabfems_nrmd_user_check_state($uid, $state) {
  $query = db_select('field_data_field_role_model_status', 'f')
    ->fields('f')
    ->condition('entity_type', 'user')
    ->condition('entity_id', $uid)
    ->condition('field_role_model_status_value', $state);
  $result = $query->execute();
  return $result->rowCount();
}
